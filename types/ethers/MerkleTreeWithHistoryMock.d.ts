/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MerkleTreeWithHistoryMockInterface extends Interface {
  functions: {
    FIELD_SIZE: TypedFunctionDescription<{ encode([]: []): string }>;

    ROOT_HISTORY_SIZE: TypedFunctionDescription<{ encode([]: []): string }>;

    ZERO_VALUE: TypedFunctionDescription<{ encode([]: []): string }>;

    currentRootIndex: TypedFunctionDescription<{ encode([]: []): string }>;

    filledSubtrees: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    getLastRoot: TypedFunctionDescription<{ encode([]: []): string }>;

    hashLeftRight: TypedFunctionDescription<{
      encode([_hasher, _left, _right]: [string, Arrayish, Arrayish]): string;
    }>;

    hasher: TypedFunctionDescription<{ encode([]: []): string }>;

    isKnownRoot: TypedFunctionDescription<{
      encode([_root]: [Arrayish]): string;
    }>;

    levels: TypedFunctionDescription<{ encode([]: []): string }>;

    nextIndex: TypedFunctionDescription<{ encode([]: []): string }>;

    roots: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    zeros: TypedFunctionDescription<{ encode([i]: [BigNumberish]): string }>;

    insert: TypedFunctionDescription<{ encode([_leaf]: [Arrayish]): string }>;
  };

  events: {};
}

export class MerkleTreeWithHistoryMock extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): MerkleTreeWithHistoryMock;
  attach(addressOrName: string): MerkleTreeWithHistoryMock;
  deployed(): Promise<MerkleTreeWithHistoryMock>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): MerkleTreeWithHistoryMock;
  once(
    event: EventFilter | string,
    listener: Listener
  ): MerkleTreeWithHistoryMock;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MerkleTreeWithHistoryMock;
  removeAllListeners(
    eventName: EventFilter | string
  ): MerkleTreeWithHistoryMock;
  removeListener(eventName: any, listener: Listener): MerkleTreeWithHistoryMock;

  interface: MerkleTreeWithHistoryMockInterface;

  functions: {
    FIELD_SIZE(overrides?: TransactionOverrides): Promise<BigNumber>;

    "FIELD_SIZE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: TransactionOverrides): Promise<number>;

    "ROOT_HISTORY_SIZE()"(overrides?: TransactionOverrides): Promise<number>;

    ZERO_VALUE(overrides?: TransactionOverrides): Promise<BigNumber>;

    "ZERO_VALUE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    currentRootIndex(overrides?: TransactionOverrides): Promise<number>;

    "currentRootIndex()"(overrides?: TransactionOverrides): Promise<number>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "filledSubtrees(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns the last root
     */
    getLastRoot(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Returns the last root
     */
    "getLastRoot()"(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    hashLeftRight(
      _hasher: string,
      _left: Arrayish,
      _right: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    "hashLeftRight(address,bytes32,bytes32)"(
      _hasher: string,
      _left: Arrayish,
      _right: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    hasher(overrides?: TransactionOverrides): Promise<string>;

    "hasher()"(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Whether the root is present in the root history
     */
    isKnownRoot(
      _root: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Whether the root is present in the root history
     */
    "isKnownRoot(bytes32)"(
      _root: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    levels(overrides?: TransactionOverrides): Promise<number>;

    "levels()"(overrides?: TransactionOverrides): Promise<number>;

    nextIndex(overrides?: TransactionOverrides): Promise<number>;

    "nextIndex()"(overrides?: TransactionOverrides): Promise<number>;

    roots(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "roots(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    zeros(i: BigNumberish, overrides?: TransactionOverrides): Promise<string>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    "zeros(uint256)"(
      i: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    insert(
      _leaf: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "insert(bytes32)"(
      _leaf: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  FIELD_SIZE(overrides?: TransactionOverrides): Promise<BigNumber>;

  "FIELD_SIZE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  ROOT_HISTORY_SIZE(overrides?: TransactionOverrides): Promise<number>;

  "ROOT_HISTORY_SIZE()"(overrides?: TransactionOverrides): Promise<number>;

  ZERO_VALUE(overrides?: TransactionOverrides): Promise<BigNumber>;

  "ZERO_VALUE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  currentRootIndex(overrides?: TransactionOverrides): Promise<number>;

  "currentRootIndex()"(overrides?: TransactionOverrides): Promise<number>;

  filledSubtrees(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "filledSubtrees(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns the last root
   */
  getLastRoot(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Returns the last root
   */
  "getLastRoot()"(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Hash 2 tree leaves, returns MiMC(_left, _right)
   */
  hashLeftRight(
    _hasher: string,
    _left: Arrayish,
    _right: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Hash 2 tree leaves, returns MiMC(_left, _right)
   */
  "hashLeftRight(address,bytes32,bytes32)"(
    _hasher: string,
    _left: Arrayish,
    _right: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  hasher(overrides?: TransactionOverrides): Promise<string>;

  "hasher()"(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Whether the root is present in the root history
   */
  isKnownRoot(
    _root: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Whether the root is present in the root history
   */
  "isKnownRoot(bytes32)"(
    _root: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  levels(overrides?: TransactionOverrides): Promise<number>;

  "levels()"(overrides?: TransactionOverrides): Promise<number>;

  nextIndex(overrides?: TransactionOverrides): Promise<number>;

  "nextIndex()"(overrides?: TransactionOverrides): Promise<number>;

  roots(arg0: BigNumberish, overrides?: TransactionOverrides): Promise<string>;

  "roots(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
   */
  zeros(i: BigNumberish, overrides?: TransactionOverrides): Promise<string>;

  /**
   * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
   */
  "zeros(uint256)"(
    i: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  insert(
    _leaf: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "insert(bytes32)"(
    _leaf: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    FIELD_SIZE(overrides?: TransactionOverrides): Promise<BigNumber>;

    "FIELD_SIZE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: TransactionOverrides): Promise<BigNumber>;

    "ROOT_HISTORY_SIZE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    ZERO_VALUE(overrides?: TransactionOverrides): Promise<BigNumber>;

    "ZERO_VALUE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    currentRootIndex(overrides?: TransactionOverrides): Promise<BigNumber>;

    "currentRootIndex()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "filledSubtrees(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the last root
     */
    getLastRoot(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns the last root
     */
    "getLastRoot()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    hashLeftRight(
      _hasher: string,
      _left: Arrayish,
      _right: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    "hashLeftRight(address,bytes32,bytes32)"(
      _hasher: string,
      _left: Arrayish,
      _right: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    hasher(overrides?: TransactionOverrides): Promise<BigNumber>;

    "hasher()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Whether the root is present in the root history
     */
    isKnownRoot(
      _root: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Whether the root is present in the root history
     */
    "isKnownRoot(bytes32)"(
      _root: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    levels(overrides?: TransactionOverrides): Promise<BigNumber>;

    "levels()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    nextIndex(overrides?: TransactionOverrides): Promise<BigNumber>;

    "nextIndex()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    roots(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "roots(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    zeros(
      i: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    "zeros(uint256)"(
      i: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    insert(
      _leaf: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "insert(bytes32)"(
      _leaf: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
