/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IDeployerInterface extends Interface {
  functions: {
    deploy: TypedFunctionDescription<{
      encode([_initCode, _salt]: [Arrayish, Arrayish]): string;
    }>;
  };

  events: {};
}

export class IDeployer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IDeployer;
  attach(addressOrName: string): IDeployer;
  deployed(): Promise<IDeployer>;

  on(event: EventFilter | string, listener: Listener): IDeployer;
  once(event: EventFilter | string, listener: Listener): IDeployer;
  addListener(eventName: EventFilter | string, listener: Listener): IDeployer;
  removeAllListeners(eventName: EventFilter | string): IDeployer;
  removeListener(eventName: any, listener: Listener): IDeployer;

  interface: IDeployerInterface;

  functions: {
    deploy(
      _initCode: Arrayish,
      _salt: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deploy(bytes,bytes32)"(
      _initCode: Arrayish,
      _salt: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  deploy(
    _initCode: Arrayish,
    _salt: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deploy(bytes,bytes32)"(
    _initCode: Arrayish,
    _salt: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    deploy(
      _initCode: Arrayish,
      _salt: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deploy(bytes,bytes32)"(
      _initCode: Arrayish,
      _salt: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
