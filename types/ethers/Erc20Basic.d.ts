/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface Erc20BasicInterface extends Interface {
  functions: {
    _totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    balanceOf: TypedFunctionDescription<{ encode([who]: [string]): string }>;

    transfer: TypedFunctionDescription<{
      encode([to, value]: [string, BigNumberish]): string;
    }>;
  };

  events: {
    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class Erc20Basic extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Erc20Basic;
  attach(addressOrName: string): Erc20Basic;
  deployed(): Promise<Erc20Basic>;

  on(event: EventFilter | string, listener: Listener): Erc20Basic;
  once(event: EventFilter | string, listener: Listener): Erc20Basic;
  addListener(eventName: EventFilter | string, listener: Listener): Erc20Basic;
  removeAllListeners(eventName: EventFilter | string): Erc20Basic;
  removeListener(eventName: any, listener: Listener): Erc20Basic;

  interface: Erc20BasicInterface;

  functions: {
    _totalSupply(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "_totalSupply()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    balanceOf(
      who: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      who: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  _totalSupply(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "_totalSupply()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  balanceOf(who: string, overrides?: TransactionOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    who: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimate: {
    _totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "_totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    balanceOf(
      who: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      who: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
