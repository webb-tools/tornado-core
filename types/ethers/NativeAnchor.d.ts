/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface NativeAnchorInterface extends Interface {
  functions: {
    FIELD_SIZE: TypedFunctionDescription<{ encode([]: []): string }>;

    ROOT_HISTORY_SIZE: TypedFunctionDescription<{ encode([]: []): string }>;

    ZERO_VALUE: TypedFunctionDescription<{ encode([]: []): string }>;

    commitments: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    currentRootIndex: TypedFunctionDescription<{ encode([]: []): string }>;

    denomination: TypedFunctionDescription<{ encode([]: []): string }>;

    deposit: TypedFunctionDescription<{
      encode([_commitment]: [Arrayish]): string;
    }>;

    filledSubtrees: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    getLastRoot: TypedFunctionDescription<{ encode([]: []): string }>;

    hashLeftRight: TypedFunctionDescription<{
      encode([_hasher, _left, _right]: [string, Arrayish, Arrayish]): string;
    }>;

    hasher: TypedFunctionDescription<{ encode([]: []): string }>;

    isKnownRoot: TypedFunctionDescription<{
      encode([_root]: [Arrayish]): string;
    }>;

    isSpent: TypedFunctionDescription<{
      encode([_nullifierHash]: [Arrayish]): string;
    }>;

    isSpentArray: TypedFunctionDescription<{
      encode([_nullifierHashes]: [Arrayish[]]): string;
    }>;

    levels: TypedFunctionDescription<{ encode([]: []): string }>;

    nextIndex: TypedFunctionDescription<{ encode([]: []): string }>;

    nullifierHashes: TypedFunctionDescription<{
      encode([]: [Arrayish]): string;
    }>;

    roots: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    verifier: TypedFunctionDescription<{ encode([]: []): string }>;

    withdraw: TypedFunctionDescription<{
      encode([
        _proof,
        _root,
        _nullifierHash,
        _recipient,
        _relayer,
        _fee,
        _refund
      ]: [
        Arrayish,
        Arrayish,
        Arrayish,
        string,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    zeros: TypedFunctionDescription<{ encode([i]: [BigNumberish]): string }>;
  };

  events: {
    Deposit: TypedEventDescription<{
      encodeTopics([commitment, leafIndex, timestamp]: [
        Arrayish | null,
        null,
        null
      ]): string[];
    }>;

    Withdrawal: TypedEventDescription<{
      encodeTopics([to, nullifierHash, relayer, fee]: [
        null,
        null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class NativeAnchor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): NativeAnchor;
  attach(addressOrName: string): NativeAnchor;
  deployed(): Promise<NativeAnchor>;

  on(event: EventFilter | string, listener: Listener): NativeAnchor;
  once(event: EventFilter | string, listener: Listener): NativeAnchor;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): NativeAnchor;
  removeAllListeners(eventName: EventFilter | string): NativeAnchor;
  removeListener(eventName: any, listener: Listener): NativeAnchor;

  interface: NativeAnchorInterface;

  functions: {
    FIELD_SIZE(overrides?: TransactionOverrides): Promise<BigNumber>;

    "FIELD_SIZE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: TransactionOverrides): Promise<number>;

    "ROOT_HISTORY_SIZE()"(overrides?: TransactionOverrides): Promise<number>;

    ZERO_VALUE(overrides?: TransactionOverrides): Promise<BigNumber>;

    "ZERO_VALUE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    commitments(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "commitments(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    currentRootIndex(overrides?: TransactionOverrides): Promise<number>;

    "currentRootIndex()"(overrides?: TransactionOverrides): Promise<number>;

    denomination(overrides?: TransactionOverrides): Promise<BigNumber>;

    "denomination()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
     * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
     */
    deposit(
      _commitment: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
     * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
     */
    "deposit(bytes32)"(
      _commitment: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "filledSubtrees(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns the last root
     */
    getLastRoot(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Returns the last root
     */
    "getLastRoot()"(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    hashLeftRight(
      _hasher: string,
      _left: Arrayish,
      _right: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    "hashLeftRight(address,bytes32,bytes32)"(
      _hasher: string,
      _left: Arrayish,
      _right: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    hasher(overrides?: TransactionOverrides): Promise<string>;

    "hasher()"(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Whether the root is present in the root history
     */
    isKnownRoot(
      _root: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Whether the root is present in the root history
     */
    "isKnownRoot(bytes32)"(
      _root: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * whether a note is already spent
     */
    isSpent(
      _nullifierHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * whether a note is already spent
     */
    "isSpent(bytes32)"(
      _nullifierHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * whether an array of notes is already spent
     */
    isSpentArray(
      _nullifierHashes: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<boolean[]>;

    /**
     * whether an array of notes is already spent
     */
    "isSpentArray(bytes32[])"(
      _nullifierHashes: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<boolean[]>;

    levels(overrides?: TransactionOverrides): Promise<number>;

    "levels()"(overrides?: TransactionOverrides): Promise<number>;

    nextIndex(overrides?: TransactionOverrides): Promise<number>;

    "nextIndex()"(overrides?: TransactionOverrides): Promise<number>;

    nullifierHashes(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "nullifierHashes(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    roots(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "roots(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    verifier(overrides?: TransactionOverrides): Promise<string>;

    "verifier()"(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
     */
    withdraw(
      _proof: Arrayish,
      _root: Arrayish,
      _nullifierHash: Arrayish,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
     */
    "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)"(
      _proof: Arrayish,
      _root: Arrayish,
      _nullifierHash: Arrayish,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    zeros(i: BigNumberish, overrides?: TransactionOverrides): Promise<string>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    "zeros(uint256)"(
      i: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;
  };

  FIELD_SIZE(overrides?: TransactionOverrides): Promise<BigNumber>;

  "FIELD_SIZE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  ROOT_HISTORY_SIZE(overrides?: TransactionOverrides): Promise<number>;

  "ROOT_HISTORY_SIZE()"(overrides?: TransactionOverrides): Promise<number>;

  ZERO_VALUE(overrides?: TransactionOverrides): Promise<BigNumber>;

  "ZERO_VALUE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  commitments(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "commitments(bytes32)"(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  currentRootIndex(overrides?: TransactionOverrides): Promise<number>;

  "currentRootIndex()"(overrides?: TransactionOverrides): Promise<number>;

  denomination(overrides?: TransactionOverrides): Promise<BigNumber>;

  "denomination()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
   * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
   */
  deposit(
    _commitment: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
   * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
   */
  "deposit(bytes32)"(
    _commitment: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filledSubtrees(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "filledSubtrees(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns the last root
   */
  getLastRoot(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Returns the last root
   */
  "getLastRoot()"(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Hash 2 tree leaves, returns MiMC(_left, _right)
   */
  hashLeftRight(
    _hasher: string,
    _left: Arrayish,
    _right: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Hash 2 tree leaves, returns MiMC(_left, _right)
   */
  "hashLeftRight(address,bytes32,bytes32)"(
    _hasher: string,
    _left: Arrayish,
    _right: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  hasher(overrides?: TransactionOverrides): Promise<string>;

  "hasher()"(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Whether the root is present in the root history
   */
  isKnownRoot(
    _root: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Whether the root is present in the root history
   */
  "isKnownRoot(bytes32)"(
    _root: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * whether a note is already spent
   */
  isSpent(
    _nullifierHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * whether a note is already spent
   */
  "isSpent(bytes32)"(
    _nullifierHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * whether an array of notes is already spent
   */
  isSpentArray(
    _nullifierHashes: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<boolean[]>;

  /**
   * whether an array of notes is already spent
   */
  "isSpentArray(bytes32[])"(
    _nullifierHashes: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<boolean[]>;

  levels(overrides?: TransactionOverrides): Promise<number>;

  "levels()"(overrides?: TransactionOverrides): Promise<number>;

  nextIndex(overrides?: TransactionOverrides): Promise<number>;

  "nextIndex()"(overrides?: TransactionOverrides): Promise<number>;

  nullifierHashes(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "nullifierHashes(bytes32)"(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  roots(arg0: BigNumberish, overrides?: TransactionOverrides): Promise<string>;

  "roots(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  verifier(overrides?: TransactionOverrides): Promise<string>;

  "verifier()"(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
   */
  withdraw(
    _proof: Arrayish,
    _root: Arrayish,
    _nullifierHash: Arrayish,
    _recipient: string,
    _relayer: string,
    _fee: BigNumberish,
    _refund: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
   */
  "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)"(
    _proof: Arrayish,
    _root: Arrayish,
    _nullifierHash: Arrayish,
    _recipient: string,
    _relayer: string,
    _fee: BigNumberish,
    _refund: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
   */
  zeros(i: BigNumberish, overrides?: TransactionOverrides): Promise<string>;

  /**
   * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
   */
  "zeros(uint256)"(
    i: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  filters: {
    Deposit(
      commitment: Arrayish | null,
      leafIndex: null,
      timestamp: null
    ): EventFilter;

    Withdrawal(
      to: null,
      nullifierHash: null,
      relayer: string | null,
      fee: null
    ): EventFilter;
  };

  estimate: {
    FIELD_SIZE(overrides?: TransactionOverrides): Promise<BigNumber>;

    "FIELD_SIZE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: TransactionOverrides): Promise<BigNumber>;

    "ROOT_HISTORY_SIZE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    ZERO_VALUE(overrides?: TransactionOverrides): Promise<BigNumber>;

    "ZERO_VALUE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    commitments(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "commitments(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    currentRootIndex(overrides?: TransactionOverrides): Promise<BigNumber>;

    "currentRootIndex()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    denomination(overrides?: TransactionOverrides): Promise<BigNumber>;

    "denomination()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
     * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
     */
    deposit(
      _commitment: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
     * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
     */
    "deposit(bytes32)"(
      _commitment: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "filledSubtrees(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the last root
     */
    getLastRoot(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns the last root
     */
    "getLastRoot()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    hashLeftRight(
      _hasher: string,
      _left: Arrayish,
      _right: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    "hashLeftRight(address,bytes32,bytes32)"(
      _hasher: string,
      _left: Arrayish,
      _right: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    hasher(overrides?: TransactionOverrides): Promise<BigNumber>;

    "hasher()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Whether the root is present in the root history
     */
    isKnownRoot(
      _root: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Whether the root is present in the root history
     */
    "isKnownRoot(bytes32)"(
      _root: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * whether a note is already spent
     */
    isSpent(
      _nullifierHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * whether a note is already spent
     */
    "isSpent(bytes32)"(
      _nullifierHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * whether an array of notes is already spent
     */
    isSpentArray(
      _nullifierHashes: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * whether an array of notes is already spent
     */
    "isSpentArray(bytes32[])"(
      _nullifierHashes: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    levels(overrides?: TransactionOverrides): Promise<BigNumber>;

    "levels()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    nextIndex(overrides?: TransactionOverrides): Promise<BigNumber>;

    "nextIndex()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    nullifierHashes(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "nullifierHashes(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    roots(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "roots(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    verifier(overrides?: TransactionOverrides): Promise<BigNumber>;

    "verifier()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
     */
    withdraw(
      _proof: Arrayish,
      _root: Arrayish,
      _nullifierHash: Arrayish,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
     */
    "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)"(
      _proof: Arrayish,
      _root: Arrayish,
      _nullifierHash: Arrayish,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    zeros(
      i: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    "zeros(uint256)"(
      i: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
